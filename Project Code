import pandas as pd
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt


## Preprocessing

url = 'https://www.dropbox.com/scl/fi/megbhgphwhpe6ke3b4xy5/Student_Assessment_Performance_20240311.csv?rlkey=n40grd4fw04j9d5585p3x84zu&dl=1'

# Read the CSV file into a pandas DataFrame
raw_data = pd.read_csv(url)

# Clean the data by removing missing values, removing unneeded columns, fixing column types/names as needed
# and making variables with sorted values/data 
df = raw_data.dropna()
columns_to_remove = ["District Code", "District", "School Code", "Organization", "Assessment Name", 
                     "Race", "Gender", "SpecialDemo", "Geography", "SubGroup", "RowStatus"]
df = df.drop(columns = columns_to_remove)
df["School Year"] = pd.to_numeric(df["School Year"], errors = "coerce")
df["ContentArea"] = df["ContentArea"].replace({"^MAT$": "Math","^MATH$": "Math", "ESSAY": "Essay"}, regex = True)
df["Grade"] = df["Grade"].replace("Twelfth", "12th Grade", regex = True)
custom_grade_sort = {"All Students": 0,"Kindergarten": 1, "1st Grade": 2,"2nd Grade": 3, "3rd Grade": 4, "4th Grade": 5, "5th Grade": 6,
            "6th Grade": 7,"7th Grade": 8, "8th Grade": 9, "9th Grade": 10, "10th Grade": 11, "11th Grade": 12, "12th Grade": 13}
df_grade_sorted = df.sort_values(by = "Grade", key = lambda x: x.map(custom_grade_sort))
df_content_sorted = df.sort_values(by = "ContentArea", ascending = True)

# Detect outliers in the columns involving testing scores using z-scores and remove them from dataset
columns_to_test = ["Tested", "Proficient", "PctProficient", "ScaleScoreAvg"]
for column in columns_to_test:
    z_scores = stats.zscore(df[column])
    outliers = (z_scores > 2.5) | (z_scores < -2.5)
    df = df[~outliers]

## Summary Data Analysis

# Numerical summary statistics for quantitative columns involving testing scores
tested_summary = df["Tested"].describe()
proficient_summary = df["Proficient"].describe()
pct_proficient_summary = df["PctProficient"].describe()
scale_score_avg_summary = df["ScaleScoreAvg"].describe()

# Count and percentages of unique values for qualitiative columns: Content Area and Grade
content_area_counts = df["ContentArea"].value_counts()
content_area_percentages = df["ContentArea"].value_counts(normalize = True)
grade_counts  = df["Grade"].value_counts()
grade_percentages = df["Grade"].value_counts(normalize = True)


## Histograms for the quantitative columns

# Histograms of Tested, Proficient, Percent Proficient, and Scale Scores Avg
fig, ax = plt.subplots()
sns.histplot(data = df, x = "Tested", binwidth = 20, kde = False, ax = ax)
ax.set_xlim(0,1000)
plt.title("Distribution of Tested Students")
plt.xlabel("Number of Tested Students")
plt.ylabel("Count")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()

fig, ax = plt.subplots()
sns.histplot(data = df, x = "Proficient", binwidth = 20, kde = False, ax = ax)
ax.set_xlim(0,1000)
plt.title("Distribution of Proficient Students")
plt.xlabel("Number of Proficient Students")
plt.ylabel("Count")
plt.grid(True)
plt.show()
# can see that proficiency histogram is skewed even more to the right than tested

fig, ax = plt.subplots()
sns.histplot(data = df, x = "PctProficient", binwidth = 5, kde = False, ax = ax)
ax.set_xlim(0,100)
plt.title("Distribution of Student Proficiency Rate")
plt.xlabel("Percent of Proficient Students")
plt.ylabel("Count")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()
# has small right skew, meaning there are a larger proportion of schools with lower proficiency rates

fig, ax = plt.subplots()
sns.histplot(data = df, x = "ScaleScoreAvg", binwidth = 100, kde = False, ax = ax)
ax.set_xlim(0,2800)
plt.title("Distribution of Student Scale Score Average")
plt.xlabel("Scale Score Average")
plt.ylabel("Count")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()
# scale score avg is bimodal, meaning a large proportion of schools have either low (around 500) or (around 2500) high scale scores


## Barplots for School Year against Tested, Proficient, Percent Proficient, and Scale Score Avg

# School Year against Tested (sum)
fig, ax = plt.subplots()
sns.barplot(data = df, x = "School Year", y = "Tested", estimator = "sum")
ax.set_ylim(1000000, 4500000)
plt.yticks([500000, 1000000, 1500000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000], 
           ["0.5M", "1M", "1.5M", "2M", "2.5M", "3M", "3.5M", "4M", "4.5M"])
plt.title("Sum of Tested Students by School Year")
plt.xlabel("School Year")
plt.ylabel("Total Tested (in millions)")
plt.xticks(rotation=45)  
plt.grid(True)
plt.show()

# School Year against Proficient (sum and mean)
fig, ax = plt.subplots()
sns.barplot(data = df, x = "School Year", y = "Proficient", estimator = "sum")
ax.set_ylim(0, 1500000)
plt.yticks([0, 250000, 500000, 750000, 1000000, 1250000, 1500000], 
           ["0", "0.25M", ".5M", ".75M", "1M", "1.25M", "1.5M"])
plt.title("Sum of Proficient Students by School Year")
plt.xlabel("School Year")
plt.ylabel("Sum of Proficient (in millions)")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()

fig, ax = plt.subplots()
sns.barplot(data = df, x = "School Year", y = "Proficient", estimator = "mean")
ax.set_ylim(0, 50)
plt.title("Mean of Proficient Students by School Year")
plt.xlabel("School Year")
plt.ylabel("Mean of Proficient")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()

# School Year against Percent Proficient (mean)
fig, ax = plt.subplots()
sns.barplot(data = df, x = "School Year", y = "PctProficient", estimator = "mean")
ax.set_ylim(0, 50)
plt.title("Mean of Student Proficiency Rate by School Year")
plt.xlabel("School Year")
plt.ylabel("Mean of Proficiency Rate")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()

# School Year against Scale Score Avg (mean) 
sns.barplot(data = df, x = "School Year", y = "ScaleScoreAvg", estimator = "mean")
plt.title("Mean of Student Scale Score Average by School Year")
plt.xlabel("School Year")
plt.ylabel("Mean of Scale Score Average")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()


## Boxen plots for Content Area and Grade against Percent Proficient and Scale Score Avg

# Content Area against Percent Proficient
sns.catplot(data = df_content_sorted, x = "ContentArea", y = "PctProficient", kind = "boxen", height = 5, aspect = 1.5)
plt.title("Boxen Plot of Student Proficiency Rate by Content Area")
plt.xlabel("Content Area")
plt.ylabel("Percent of Proficient Students")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()

# Content Area against Scale Score Average
sns.catplot(data = df_content_sorted, x = "ContentArea", y = "ScaleScoreAvg", kind = "boxen", height = 5, aspect = 1.5)
plt.title("Boxen Plot of Student Scale Score Average by Content Area")
plt.xlabel("Content Area")
plt.ylabel("Scale Score Average of Students")
plt.xticks(rotation=45)  
plt.grid(True)
plt.show()

# Grade against Percent Proficient
sns.catplot(data = df_grade_sorted, x = "Grade", y = "PctProficient", kind = "boxen", height = 5, aspect = 1.5)
plt.title("Boxen Plot of Student Proficiency Rate by Grade")
plt.xlabel("Grade")
plt.ylabel("Percent of Proficient Students")
plt.xticks(rotation=45)  
plt.grid(True)
plt.show()


# Grade Area against Scale Score Average
sns.catplot(data = df_grade_sorted, x = "Grade", y = "ScaleScoreAvg", kind = "boxen", height = 5, aspect = 1.5)
plt.title("Boxen Plot of Student Scale Score Average by Grade")
plt.xlabel("Grade")
plt.ylabel("Scale Score Average of Students")
plt.xticks(rotation=45) 
plt.grid(True)
plt.show()


## Correlations

years, categories = pd.factorize(df["School Year"], sort = True)
df["School Year"] = years

# Correlation between School Year and Proficiency Rate Overall
year_prof_corr = df["PctProficient"].corr(df["School Year"]) 
print("Correlation between School Year and Proficiency Rate:", year_prof_corr)

# Correlation between School Year and Scale Score Avg Overall
year_score_corr = df["ScaleScoreAvg"].corr(df["School Year"]) 
print("Correlation between School Year and Scale Score Average:", year_score_corr)

# Correlation between School Year and Percent Proficient Grouped by Content Area
year_prof_corr_content = df.groupby("ContentArea").apply(lambda x: x["PctProficient"].corr(x["School Year"])) 
corr_prof_content_df = year_prof_corr_content.reset_index()
corr_prof_content_df.columns = ["ContentArea", "Correlation"]
corr_prof_content_sorted = corr_prof_content_df.sort_values(by = "ContentArea", ascending = True)
print("Correlation between School Year and Proficiency Rate Grouped by Content Area:", corr_prof_content_sorted)

# Correlation between School Year and Scale Score Avg Grouped by Content Area
year_score_corr_content = df.groupby("ContentArea").apply(lambda x: x["ScaleScoreAvg"].corr(x["School Year"])) 
corr_score_content_df = year_score_corr_content.reset_index()
corr_score_content_df.columns = ["ContentArea", "Correlation"]
corr_score_content_sorted = corr_score_content_df.sort_values(by = "ContentArea", ascending = True)
print("Correlation between School Year and Scale Score Average Grouped by Content Area:", corr_score_content_sorted)

# Correlation between School Year and Percent Proficient Grouped by Grade
year_prof_corr_grade = df.groupby("Grade").apply(lambda x: x["PctProficient"].corr(x["School Year"])) 
corr_prof_grade_df = year_prof_corr_grade.reset_index()
corr_prof_grade_df.columns = ["Grade", "Correlation"]
corr_prof_grade_sorted = corr_prof_grade_df.sort_values(by = "Grade", key = lambda x: x.map(custom_grade_sort))
print("Correlation between School Year and Proficiency Rate Grouped by Grade:", corr_prof_grade_sorted)

# Correlation between School Year and Scale Score Avg Grouped by Grade
year_score_corr_grade = df.groupby("Grade").apply(lambda x: x["ScaleScoreAvg"].corr(x["School Year"])) 
corr_score_grade_df = year_score_corr_grade.reset_index()
corr_score_grade_df.columns = ["Grade", "Correlation"]
corr_score_grade_sorted = corr_score_grade_df.sort_values(by = "Grade", key = lambda x: x.map(custom_grade_sort))
print("Correlation between School Year and Scale Score Average Grouped by Grade:", corr_score_grade_sorted)

